From b24f8af1e8df9a81ea13dc403b8e5e58a14b5ea0 Mon Sep 17 00:00:00 2001
From: Aleksander Morgado <aleksander@aleksander.es>
Date: Tue, 18 May 2021 11:14:31 +0200
Subject: [PATCH] core: drop "volatile" for g_once_init_enter locations

This fixes a few (fatal in gcc 11) warnings.

See https://gitlab.gnome.org/GNOME/glib/-/issues/600

(cherry picked from commit a80b1f1f25db0b81b25c45b3929975b68ac44ecb)
---
 build-aux/qmi-codegen/Container.py             | 8 ++++----
 build-aux/templates/qmi-enum-types-template.c  | 8 ++++----
 build-aux/templates/qmi-error-types-template.c | 8 ++++----
 src/libqmi-glib/qmi-message-context.c          | 8 ++++----
 4 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/build-aux/qmi-codegen/Container.py b/build-aux/qmi-codegen/Container.py
index 08daa33f..690d4fc5 100644
--- a/build-aux/qmi-codegen/Container.py
+++ b/build-aux/qmi-codegen/Container.py
@@ -229,18 +229,18 @@ class Container:
             '${static}GType\n'
             '${underscore}_get_type (void)\n'
             '{\n'
-            '    static volatile gsize g_define_type_id__volatile = 0;\n'
+            '    static gsize g_define_type_id_initialized = 0;\n'
             '\n'
-            '    if (g_once_init_enter (&g_define_type_id__volatile)) {\n'
+            '    if (g_once_init_enter (&g_define_type_id_initialized)) {\n'
             '        GType g_define_type_id =\n'
             '            g_boxed_type_register_static (g_intern_static_string ("${camelcase}"),\n'
             '                                          (GBoxedCopyFunc) ${underscore}_ref,\n'
             '                                          (GBoxedFreeFunc) ${underscore}_unref);\n'
             '\n'
-            '        g_once_init_leave (&g_define_type_id__volatile, g_define_type_id);\n'
+            '        g_once_init_leave (&g_define_type_id_initialized, g_define_type_id);\n'
             '    }\n'
             '\n'
-            '    return g_define_type_id__volatile;\n'
+            '    return g_define_type_id_initialized;\n'
             '}\n'
             '\n'
             '${static}${camelcase} *\n'
diff --git a/build-aux/templates/qmi-enum-types-template.c b/build-aux/templates/qmi-enum-types-template.c
index 0e556896..d2670110 100644
--- a/build-aux/templates/qmi-enum-types-template.c
+++ b/build-aux/templates/qmi-enum-types-template.c
@@ -21,16 +21,16 @@ static const G@Type@Value @enum_name@_values[] = {
 GType
 @enum_name@_get_type (void)
 {
-    static volatile gsize g_define_type_id__volatile = 0;
+    static gsize g_define_type_id_initialized = 0;
 
-    if (g_once_init_enter (&g_define_type_id__volatile)) {
+    if (g_once_init_enter (&g_define_type_id_initialized)) {
         GType g_define_type_id =
             g_@type@_register_static (g_intern_static_string ("@EnumName@"),
                                       @enum_name@_values);
-        g_once_init_leave (&g_define_type_id__volatile, g_define_type_id);
+        g_once_init_leave (&g_define_type_id_initialized, g_define_type_id);
     }
 
-    return g_define_type_id__volatile;
+    return g_define_type_id_initialized;
 }
 
 /* Enum-specific method to get the value as a string.
diff --git a/build-aux/templates/qmi-error-types-template.c b/build-aux/templates/qmi-error-types-template.c
index 2e138037..54e649de 100644
--- a/build-aux/templates/qmi-error-types-template.c
+++ b/build-aux/templates/qmi-error-types-template.c
@@ -20,16 +20,16 @@ static const G@Type@Value @enum_name@_values[] = {
 GType
 @enum_name@_get_type (void)
 {
-    static volatile gsize g_define_type_id__volatile = 0;
+    static gsize g_define_type_id_initialized = 0;
 
-    if (g_once_init_enter (&g_define_type_id__volatile)) {
+    if (g_once_init_enter (&g_define_type_id_initialized)) {
         GType g_define_type_id =
             g_@type@_register_static (g_intern_static_string ("@EnumName@"),
                                       @enum_name@_values);
-        g_once_init_leave (&g_define_type_id__volatile, g_define_type_id);
+        g_once_init_leave (&g_define_type_id_initialized, g_define_type_id);
     }
 
-    return g_define_type_id__volatile;
+    return g_define_type_id_initialized;
 }
 
 /* Enum-specific method to get the value as a string.
diff --git a/src/libqmi-glib/qmi-message-context.c b/src/libqmi-glib/qmi-message-context.c
index 7461969c..f54e7d5c 100644
--- a/src/libqmi-glib/qmi-message-context.c
+++ b/src/libqmi-glib/qmi-message-context.c
@@ -48,18 +48,18 @@ qmi_message_context_new (void)
 GType
 qmi_message_context_get_type (void)
 {
-    static volatile gsize g_define_type_id__volatile = 0;
+    static gsize g_define_type_id_initialized = 0;
 
-    if (g_once_init_enter (&g_define_type_id__volatile)) {
+    if (g_once_init_enter (&g_define_type_id_initialized)) {
         GType g_define_type_id =
             g_boxed_type_register_static (g_intern_static_string ("QmiMessageContext"),
                                           (GBoxedCopyFunc) qmi_message_context_ref,
                                           (GBoxedFreeFunc) qmi_message_context_unref);
 
-        g_once_init_leave (&g_define_type_id__volatile, g_define_type_id);
+        g_once_init_leave (&g_define_type_id_initialized, g_define_type_id);
     }
 
-    return g_define_type_id__volatile;
+    return g_define_type_id_initialized;
 }
 
 QmiMessageContext *
-- 
2.34.1

